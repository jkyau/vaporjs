{
  "name": "geo",
  "description": "Geo is a very basic, but simple and extendable, geocode library for Node.js. Currently it only supports Google's Geocode API (v3) - Geo Spatial features are coming out soon",
  "homepage": "http://geeks.aretotally.in/projects/geonode",
  "keywords": [
    "geo",
    "geospatial",
    "geocode",
    "geocoding",
    "geohash"
  ],
  "author": {
    "name": "Felipe Oliveira",
    "email": "felipera@gmail.com"
  },
  "contributors": [],
  "repository": {
    "type": "git",
    "url": "git@github.com:feliperazeek/geonode.git"
  },
  "licenses": [
    {
      "type": "GPLv3",
      "url": "http://www.gnu.org/licenses/gpl-3.0.txt"
    }
  ],
  "dependencies": {
    "geohash": ""
  },
  "lib": "lib",
  "main": "./lib/geo",
  "version": "0.0.3",
  "directories": {
    "test": "./test"
  },
  "engines": {
    "node": ">= 0.3.0"
  },
  "readme": "# Geo for Node.js\nby Felipe Oliveira (http://twitter.com/_felipera)\n\nGeo is a very basic, but simple, geo library for Node.js using Google's Geocode API (V3) for Geocoding and GeoHash for GeoSpatial support.\n\n\n\n## Installation\n\n\t\tnpm install geo\n\n\n\n## Usage - Geocode\n\n\t\tvar geo = require('geo');\n\t\t\n\t\tvar address = '885 6th Ave #15D New York, NY 10001';\n\t\tvar sensor = false;\n\t\tgeo.geocoder(geo.google, address, sensor, function(formattedAddress, latitude, longitude) {\n\t\t\tconsole.log(\"Formatted Address: \" + formattedAddress);\n\t\t\tconsole.log(\"Latitude: \" + latitude);\n\t\t\tconsole.log(\"Longitude: \" + longitude);\n\t\t});\n\t\t\n\n\t\t\n## Usage - GeoHash\n\n\t\t// First define a model instance\n\t\tvar model = {'address': '885 6th #15D, New York, NY 10001', 'baths': '1', 'beds': '1'};\n\t\n\t\t// Define callback that gets the location (from a single field, multiple fields, whatever) from the model instance (model can be anything, DB class, JSON, array)\n\t\tvar locationGetterCallback = function(model) { return model['address']; };\n\t\n\t\t// Define callback that will augment the model instance with geo information such as latitude, longitude and geohash\n\t\tvar geoSetterCallback = function(model, latitude, longitude, hash, callback) { \n\t\t\tconsole.log('Geo Hash: ' + hash); \n\t\t\tmodel['latitude'] = latitude; \n\t\t\tmodel['longitude'] = longitude; \n\t\t\tmodel['geohash'] = hash; \n\t\t\tcallback( model ); \n\t\t};\n\t\n\t\t// Now let's see what happens with the model\n\t\tgeo.geomodel(model, locationGetterCallback, geoSetterCallback, function(model) {\n\t\t\tconsole.log(\"Model: \" + model['address'] + ', Geo: ' + model['geohash']);\n\t\t}); \n\n",
  "readmeFilename": "README.md",
  "_id": "geo@0.0.3",
  "_from": "geo@0.0.3"
}
